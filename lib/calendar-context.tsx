import { createContext, ReactNode, useCallback, useContext, useEffect, useState } from "react";
import { ID, Query } from "react-native-appwrite";
import { account, CALENDAR_COLLECTION_ID, DATABASE_ID, databases, EVENT_COLLECTION_ID, STAMP_COLLECTION_ID } from "./appwrite";

// Types
// $createdAt and $updatedAt fields removed as requested

export type CalendarSummary = {
Â  Â  $id: string;
Â  Â  title: string;
Â  Â  theme: string;
Â  Â  user_id: string;
};

export type CalendarEvent = {
Â  Â  $id: string;
Â  Â  date: string;
Â  Â  user_id: string;
Â  Â  cal_id: string; 
Â  Â  stamp_id: string;
};

export type EventStamp = { 
Â  Â  $id: string; 
Â  Â  name: string;
Â  Â  event_emoji: string;
Â  Â  user_id: string;
};

// NEW: Type that combines an event with its stamp data
export type RichCalendarEvent = CalendarEvent & {
Â  Â  stamp: EventStamp;
};


export type CalendarDetails = CalendarSummary & {
Â  Â  events: CalendarEvent[];
};

// Context Type definition
type CalendarContextType = {
Â  Â  calendars: CalendarSummary[];
Â  Â  selectedCalendar: CalendarDetails | null;
Â  Â  eventStamps: EventStamp[]; 
Â  Â  fetchCalendars: () => Promise<void>;
Â  Â  fetchStamps: () => Promise<void>;
Â  Â  fetchCalendarById: (id: string) => Promise<void>;
Â  Â  addCalendar: (title: string, theme: string) => Promise<void>;
Â  Â  addEvent: (calendarId: string, stampId: string, eventDate: string) => Promise<void>; 
Â  Â  addStamp: (name: string, icon: string) => Promise<void>;
Â  Â  // NEW: Functions for detailed event/stamp handling
Â  Â  fetchEventById: (id: string) => Promise<RichCalendarEvent | null>;
Â  Â  getStampById: (id: string) => EventStamp | undefined;
};

export const CalendarContext = createContext<CalendarContextType | undefined>(undefined);


export function CalendarProvider({ children }: { children: ReactNode }) {
Â  Â  const [calendars, setCalendars] = useState<CalendarSummary[]>([]);
Â  Â  const [selectedCalendar, setSelectedCalendar] = useState<CalendarDetails | null>(null);
Â  Â  const [eventStamps, setEventStamps] = useState<EventStamp[]>([]);

Â  Â  async function getCurrentUserId(): Promise<string> {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const user = await account.get();
Â  Â  Â  Â  Â  Â  return user.$id;
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.log("Error getting current user:", err);
Â  Â  Â  Â  Â  Â  return ""; 
Â  Â  Â  Â  }
Â  Â  }
Â  Â  
Â  Â  // NEW: Synchronous utility to find a stamp in the local state
Â  Â  const getStampById = useCallback((id: string): EventStamp | undefined => {
Â  Â  Â  Â  return eventStamps.find(stamp => stamp.$id === id);
Â  Â  }, [eventStamps]);

Â  Â  // fetchCalendars (Wrapped in useCallback)
Â  Â  const fetchCalendars = useCallback(async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const userId = await getCurrentUserId();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const response = await databases.listDocuments(DATABASE_ID, CALENDAR_COLLECTION_ID, [
Â  Â  Â  Â  Â  Â  Â  Â  Query.equal("user_id", userId)
Â  Â  Â  Â  Â  Â  ]);

Â  Â  Â  Â  Â  Â  const allCalendars: CalendarSummary[] = response.documents.map((doc: any) => ({
Â  Â  Â  Â  Â  Â  Â  Â  $id: doc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  title: doc.title,
Â  Â  Â  Â  Â  Â  Â  Â  theme: doc.theme,
Â  Â  Â  Â  Â  Â  Â  Â  user_id: doc.user_id, 
Â  Â  Â  Â  Â  Â  }));

Â  Â  Â  Â  Â  Â  setCalendars(allCalendars);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log("Error fetching calendars:", error);
Â  Â  Â  Â  }
Â  Â  }, []);

Â  Â  // fetchStamps (Wrapped in useCallback)
Â  Â  const fetchStamps = useCallback(async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const userId = await getCurrentUserId();
Â  Â  Â  Â  Â  Â  if (!userId) return;

Â  Â  Â  Â  Â  Â  const response = await databases.listDocuments(DATABASE_ID, STAMP_COLLECTION_ID, [
Â  Â  Â  Â  Â  Â  Â  Â  Query.equal("user_id", userId)
Â  Â  Â  Â  Â  Â  ]);

Â  Â  Â  Â  Â  Â  const stamps: EventStamp[] = response.documents.map((doc: any) => ({
Â  Â  Â  Â  Â  Â  Â  Â  $id: doc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  name: doc.name, 
Â  Â  Â  Â  Â  Â  Â  Â  event_emoji: doc.event_emoji, 
Â  Â  Â  Â  Â  Â  Â  Â  user_id: doc.user_id,
Â  Â  Â  Â  Â  Â  }));

Â  Â  Â  Â  Â  Â  setEventStamps(stamps);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log("Error fetching stamps:", error);
Â  Â  Â  Â  }
Â  Â  }, []);

Â  Â  // NEW: Function to fetch a single event and its related stamp
Â  Â  const fetchEventById = useCallback(async (id: string): Promise<RichCalendarEvent | null> => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const eventDoc: any = await databases.getDocument(DATABASE_ID, EVENT_COLLECTION_ID, id);

Â  Â  Â  Â  Â  Â  const event: CalendarEvent = {
Â  Â  Â  Â  Â  Â  Â  Â  $id: eventDoc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  date: eventDoc.date,
Â  Â  Â  Â  Â  Â  Â  Â  user_id: eventDoc.user_id,
Â  Â  Â  Â  Â  Â  Â  Â  cal_id: eventDoc.cal_id,
Â  Â  Â  Â  Â  Â  Â  Â  stamp_id: eventDoc.stamp_id,
Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  Â  // Attempt to find the stamp in the locally stored stamps first using the new utility
Â  Â  Â  Â  Â  Â  let stamp = getStampById(event.stamp_id);

Â  Â  Â  Â  Â  Â  // Optional: If the stamp isn't loaded (e.g., event was created by another user 
Â  Â  Â  Â  Â  Â  // and this user hasn't fetched all stamps, or permissions issue), fetch it directly.
Â  Â  Â  Â  Â  Â  if (!stamp) {
Â  Â  Â  Â  Â  Â  Â  Â  Â const stampDoc: any = await databases.getDocument(DATABASE_ID, STAMP_COLLECTION_ID, event.stamp_id);
Â  Â  Â  Â  Â  Â  Â  Â  Â stamp = {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â $id: stampDoc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â name: stampDoc.name,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â event_emoji: stampDoc.event_emoji,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â user_id: stampDoc.user_id,
Â  Â  Â  Â  Â  Â  Â  Â  Â } as EventStamp;
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  return { ...event, stamp: stamp as EventStamp };
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log(`Error fetching event ${id}:`, error);
Â  Â  Â  Â  Â  Â  return null;
Â  Â  Â  Â  }
Â  Â  }, [getStampById]); 


Â  Â  // addStamp (Wrapped in useCallback)
Â  Â  const addStamp = useCallback(async (name: string, icon: string) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const userId = await getCurrentUserId();

Â  Â  Â  Â  Â  Â  const doc: any = await databases.createDocument(
Â  Â  Â  Â  Â  Â  Â  Â  DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  STAMP_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  ID.unique(),
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name: name,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  event_emoji: icon,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user_id: userId,
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  );

Â  Â  Â  Â  Â  Â  const newStamp: EventStamp = { 
Â  Â  Â  Â  Â  Â  Â  Â  $id: doc.$id, 
Â  Â  Â  Â  Â  Â  Â  Â  name: doc.name, 
Â  Â  Â  Â  Â  Â  Â  Â  event_emoji: doc.event_emoji, 
Â  Â  Â  Â  Â  Â  Â  Â  user_id: doc.user_id,
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  setEventStamps(prev => [...prev, newStamp]);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log("Error adding stamp:", error);
Â  Â  Â  Â  }
Â  Â  }, []); 

Â  Â  // fetchCalendarById (Mapping updated)
Â  Â  const fetchCalendarById = useCallback(async (id: string) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const calendarDoc: any = await databases.getDocument(DATABASE_ID, CALENDAR_COLLECTION_ID, id);

Â  Â  Â  Â  Â  Â  const eventsResponse = await databases.listDocuments(DATABASE_ID, EVENT_COLLECTION_ID, [
Â  Â  Â  Â  Â  Â  Â  Â  Query.equal("cal_id", id), 
Â  Â  Â  Â  Â  Â  ]);
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const events: CalendarEvent[] = eventsResponse.documents.map((doc: any) => ({
Â  Â  Â  Â  Â  Â  Â  Â  $id: doc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  date: doc.date,
Â  Â  Â  Â  Â  Â  Â  Â  user_id: doc.user_id,
Â  Â  Â  Â  Â  Â  Â  Â  cal_id: doc.cal_id,
Â  Â  Â  Â  Â  Â  Â  Â  stamp_id: doc.stamp_id, 
Â  Â  Â  Â  Â  Â  }));
            
            // ðŸš€ DEBUG LOG 1: Print raw event data to console (Already done)
            console.log("--- FETCHED EVENTS DEBUG ---");
            console.log(`Calendar ID: ${id}`);
            console.log("Events:", events);
            
            // ðŸš€ DEBUG LOG 2: Check stamp lookup for each event
            events.forEach(event => {
                const stamp = getStampById(event.stamp_id);
                console.log(`Event ID ${event.$id.substring(0, 8)}... (Stamp ID: ${event.stamp_id.substring(0, 8)}...): Found Emoji -> ${stamp?.event_emoji || 'NOT FOUND'}`);
            });
            console.log("----------------------------");


Â  Â  Â  Â  Â  Â  setSelectedCalendar({
Â  Â  Â  Â  Â  Â  Â  Â  $id: calendarDoc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  title: calendarDoc.title,
Â  Â  Â  Â  Â  Â  Â  Â  theme: calendarDoc.theme,
Â  Â  Â  Â  Â  Â  Â  Â  user_id: calendarDoc.user_id ?? "",
Â  Â  Â  Â  Â  Â  Â  Â  events: events, 
Â  Â  Â  Â  Â  Â  } as CalendarDetails);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log("Error fetching calendar and events:", error);
Â  Â  Â  Â  }
Â  Â  }, [getStampById]); // Added getStampById to dependency array for completeness

Â  Â  // addCalendar (Wrapped in useCallback)
Â  Â  const addCalendar = useCallback(async (title: string, theme: string) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const userId = await getCurrentUserId();
Â  Â  Â  Â  Â  Â  const doc: any = await databases.createDocument(
Â  Â  Â  Â  Â  Â  Â  Â  DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  CALENDAR_COLLECTION_ID,
Â  Â  Â  Â  Â  Â  Â  Â  ID.unique(),
Â  Â  Â  Â  Â  Â  Â  Â  { title, theme, user_id: userId, }
Â  Â  Â  Â  Â  Â  );

Â  Â  Â  Â  Â  Â  setCalendars(prev => [
Â  Â  Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  $id: doc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  title: doc.title,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  theme: doc.theme,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user_id: doc.user_id ?? userId,
Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  ]);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log("Error adding calendar:", error);
Â  Â  Â  Â  }
Â  Â  }, []);

Â  Â  // addEvent (Wrapped in useCallback, includes force-update fix)
Â  Â  const addEvent = useCallback(async (calendarId: string, stampId: string, eventDate: string) => { 
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const userId = await getCurrentUserId();
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  const newEventDoc: any = await databases.createDocument(
Â  Â  Â  Â  Â  Â  Â  Â  DATABASE_ID,
Â  Â  Â  Â  Â  Â  Â  Â  EVENT_COLLECTION_ID, 
Â  Â  Â  Â  Â  Â  Â  Â  ID.unique(),
Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  date: eventDate,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  user_id: userId, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  cal_id: calendarId, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  stamp_id: stampId,
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  );

Â  Â  Â  Â  Â  Â  const createdEvent: CalendarEvent = {
Â  Â  Â  Â  Â  Â  Â  Â  $id: newEventDoc.$id,
Â  Â  Â  Â  Â  Â  Â  Â  date: newEventDoc.date,
Â  Â  Â  Â  Â  Â  Â  Â  user_id: newEventDoc.user_id,
Â  Â  Â  Â  Â  Â  Â  Â  cal_id: newEventDoc.cal_id,
Â  Â  Â  Â  Â  Â  Â  Â  stamp_id: newEventDoc.stamp_id,
Â  Â  Â  Â  Â  Â  };

Â  Â  Â  Â  Â  Â  // ðŸ›‘ FIX: Use spread operator on the prev object to force a new object reference.
Â  Â  Â  Â  Â  Â  setSelectedCalendar(prev => {
Â  Â  Â  Â  Â  Â  Â  Â  if (!prev || prev.$id !== calendarId) return prev;
Â  Â  Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  Â  Â  // 1. Create a new events array
Â  Â  Â  Â  Â  Â  Â  Â  const newEventsArray = [...prev.events, createdEvent];

Â  Â  Â  Â  Â  Â  Â  Â  // 2. Return a brand new object using spread syntax
Â  Â  Â  Â  Â  Â  Â  Â  return { 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...prev, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  events: newEventsArray,
Â  Â  Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.log("Error adding event:", error);
Â  Â  Â  Â  }
Â  Â  }, []); 

Â  Â  
Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchStamps();
Â  Â  }, [fetchStamps]);

Â  Â  return (
Â  Â  Â  Â  <CalendarContext.Provider
Â  Â  Â  Â  Â  Â  value={{ 
Â  Â  Â  Â  Â  Â  Â  Â  calendars, 
Â  Â  Â  Â  Â  Â  Â  Â  selectedCalendar, 
Â  Â  Â  Â  Â  Â  Â  Â  eventStamps, 
Â  Â  Â  Â  Â  Â  Â  Â  fetchCalendars, 
Â  Â  Â  Â  Â  Â  Â  Â  fetchStamps,
Â  Â  Â  Â  Â  Â  Â  Â  fetchCalendarById, 
Â  Â  Â  Â  Â  Â  Â  Â  addCalendar, 
Â  Â  Â  Â  Â  Â  Â  Â  addEvent,
Â  Â  Â  Â  Â  Â  Â  Â  addStamp,
Â  Â  Â  Â  Â  Â  Â  Â  fetchEventById, // ADDED
Â  Â  Â  Â  Â  Â  Â  Â  getStampById, // ADDED
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {children}
Â  Â  Â  Â  </CalendarContext.Provider>
Â  Â  );
}


export function useCalendar() {
Â  Â  const context = useContext(CalendarContext);
Â  Â  if (!context) throw new Error("useCalendar must be used within a CalendarProvider");
Â  Â  return context;
}
